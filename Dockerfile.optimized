# 使用 Node.js 18 作为基础镜像
FROM mcr.microsoft.com/mirror/docker/library/node:18-alpine AS base

# 在基础镜像中安装 pnpm
RUN npm install -g pnpm

# 安装依赖阶段
FROM base AS deps
WORKDIR /app

# 只复制依赖相关文件，优化缓存
COPY package.json pnpm-lock.yaml* ./

# 安装必要的系统依赖（仅构建必需）
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    libc6-compat

# 安装生产依赖
RUN pnpm install --prod --frozen-lockfile

# 构建阶段
FROM base AS builder
WORKDIR /app

# 安装构建必需的系统依赖
RUN apk add --no-cache \
    python3 \
    make \
    g++

# 复制生产依赖
COPY --from=deps /app/node_modules ./node_modules

# 复制源代码
COPY . .

# 安装所有依赖（包括开发依赖）
RUN pnpm install --frozen-lockfile

# 构建应用
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=4096"
RUN pnpm run build

# 生产环境阶段
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# 安装生产环境必需的系统依赖
RUN apk add --no-cache \
    openssl \
    postgresql-client \
    mysql-client \
    bind-tools

# 复制运行时所需文件
COPY --from=builder /app/next.config.js ./
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/prisma ./prisma

# 生成 Prisma 客户端
RUN npx prisma generate

# 设置默认环境变量
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
ENV NEXTAUTH_SECRET=c8350c0bc49c8a1a0e7c9a83a0e6c5c1e2c0b9d8f4a7e3b1d6c9a2f5e8d7b4a
ENV NEXTAUTH_URL=http://localhost:3000
# 使用环境变量来配置数据库主机
ENV DB_HOST="host.docker.internal"

# 暴露端口
EXPOSE 3000

# 添加健康检查
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1

# 启动应用
CMD ["node", "server.js"]
